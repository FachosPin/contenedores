

####################################################################
############ working with network ports
####################################################################

- Puertos de red proveen acceso a servicios en un contenedor
- Ejecutar un servicio para compartirlo desde la direccion IP de un contenedor
- Exponer puertos para hacer el servicio disponible a el host
	. EXPOSE linea en el Dockerfile
	. EL el comando docker use --expose=XXXX
	. El puerto de un contenedor expuesto puede ser diferente al puerto asociado en el host
- Enlazando puertos expuestos de un contenedor a otro

####################################################################
############ Changing Daemon or Container Network
####################################################################

- Edita /etc/sysconfig/docker para cambiar el daemon con -b:
	Establecer -b=none causa que el contenedor este aislado
	Establecer -b=newbridge
- Para contenedores individuales use 
	docker run --net=option para establecer la red del contenedor:
	--net=bridge: Nueva (network stack) en docker0 (predeterminado)
	--net=none: crear un contenedor au¡islado (no networking)
	--net=host: usa la interfaz del host directamente (bypass bridge)
	--net=container: usa la interfaz de red de otro contenedor

####################################################################
############ Understanding container network
####################################################################

- Docker crea un (docker0 bridge interface) en el host
- La interface docker0  usa el rango de direcciones 172.17.0.0/16
		mas de 64,000 Direcciones IP 
- Cada contenedor, de forma predeterminada, optiene una direccion IP del rango
- El mismo servicio puede ejecutarce muchas veces en el mismo host porque las ip son diferentes en cada contenedor.
- Usted puede cambiar la configuracion de red predeterminada para el docker daemon y para cada contenedor



####################################################################
############ elegir el alcance de un contenedor
####################################################################

- Limite el uso de un contenedor a un solo microservicio
	Permite mas flexibilidad en el escalamiento
	Permite que diferentes servicios sigan diferentes ciclos de lanzamiento
- estabilizar las interfaces en el contenedor (ports , APIs, etc.)  si es posible
	te permite crear servicios en los que otros contenedores pueden depender
	Permite continuar con actualizaciones con interrupción menor
	más fácil hacer conjuntos de contenedores para kubernetes u otros


####################################################################
############ Running the build
####################################################################

Aqui hay cosas para tener en mente durante la contruccion del docker
	- Cuando una construccion falla, el siguiente intento de construccion reusa lo que puede (recuerde las capas)
	- Usted puede especificar que no use cached data con --no-cache 
	- cache no es usado si incluye archivos (ADD o COPY)
		si cambia se corren 
		si no han cambiado no corre
	- Use --pull si quieres estar seguro de la ultima version de la imagen base
	- Use --rm=true remueve capas intermedias una ves que la construccion es exitosa
		Si no quieres tener capas intermedias 
	- Etiquete de forma apropiada su imagen con nombre y version 


####################################################################
############ Escogiendo software para incluir en la contruccion 
####################################################################

escoguiendo contenido para sus contenedor:
	- Inicie con imagenes-base de confianza por distribuidores establecidos
	- Use paquetes de software probados, seguros y de fuentes confiables
	- Remueva o no instale paquetes innecesarios
	- Excluir partes de los paquetes que no se necesitan como (docs o languages)
		RUN yum fs filter documentation



####################################################################
############ Configurando su Dockerfile y el directorio de compilación
####################################################################

- Dockerfile en un nuevo directorio desde ya que el daemon lea todo
- Usar el .dockerignore para expluir los archivos ue no se necesitan en la construccion
- Cada instruccion en el dockefile crear una capa, entonces:
	considere agregar multiples comandos para RUN
	si considera que RUN va a fallar cree varias lineas
	considere eliminar o aplastar capas innecesarias
	End container at usable layer: base os, libraries, service
		Que el contenedor termine en una capa util para el usuario final

####################################################################
############ Tips vontruccion de contenedores
####################################################################

Revisa las mejores practivas para escribir Dockerfiles
	https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/
Pagina de referencia para los Dockerfiles
	https://docs.docker.com/engine/reference/builder/
Para imagenes oficiales de Docker, follow guidelines
	https://github.com/docker-library/official-images


####################################################################
############ Get involved with Docker Development
####################################################################

Docker developer IRC :
	Chatea con otros desarrolladores de docker
irc://chat.freenode.net#docker-dev
Docker developer mailing list
	Ask and follow discissions
https://groups.google.com/forum/#!forum/docker-dev
	Docker blog: encuentra proximos eventos y noticias
https://blog.docker.com



####################################################################
############ 10.1 Choose container development tools
####################################################################

elegir herramientas de desarrollo para docker


####################################################################
########################## Cockpit DEMO
####################################################################

++ 	En el navegador web, abrir localhost:9090
++ Login dentro de 
	User las credenciale de root
++ Select -> Containers
++	Ver los contenedores que se estan ejecutando y las imagenes
++ Select -> get new image -> search for cricket/hangman/
https://hub.docker.com/r/cricket/hangman/
++ run -> docker hangman -> change commang for hangman
++ select -> double click hangman

####################################################################
################## Manage containers with cockpit
####################################################################

- Cockpit es una herramienta Web-based para administrar linux
- Monitorea actividades generales de los sistemas
- incluye una interfaz para trabajar con:
	Las imagenes de los contenedores
	Los contenedores en tiempo de ejecucion
- En la pestaña de contenedores, podemos informacion como:	
	CPU y memoria usada por los contenedores
	Lista de los contenedores que se estan ejecutando
	Lista de las imagenes que se estan almacenando
- Deja descargar imagenes y arrancar contenedores


????????????????????????????????????????????????????????????????????
¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿ Kubernetes DEMO
????????????????????????????????????????????????????????????????????

http://cockpit-project.org/
https://kubernetes.io/
https://www.linuxtechi.com/install-kubernetes-1-7-centos7-rhel7/
 9.1 Understand Kubernetes (17:22 mins)

####################################################################
################## Kubernetes
####################################################################

Kubernetes orquesta contenedores
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

- Provee administracion de clusters y orquestacion 
- Proyecto de Google en produccion por 15 años (billones de contenedores)
- Kubernetes tiene muchos partners y es adoptado por muchas empresas
- Capaz de administrar contenedores a traves de muchos nodos
- Cada custer se basa en un master y en uno o varios nodos
- Automatizar tareas:
	Gestion de contenedores (Container Management)
	Deployment (Despliege)
	Scaling (Escalabilidad)
	escala según sea necesario
- Escala según sea necesario usando controladores de replicación
- Puede mover workloads a nodos OnP o en nubes publicas o Hibridas

Kubernetes Masters
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

- Daemon services on Kubernetes master:
	kupe-apiserver
	kupe-controller-manager
	kupe-scheduler
	etcd
- Mantiene un seguimiento de la localizacion los nodos y verifica su salud
- Planifica contenedores (como pods) para correr en nodos
- Reacciona cuando el cluster cambia, intenta retornar a un estado deseado
- previene el punto único de falla (prevents single-point-of-failure) con pods
a traves de multiples nodos
- el propio maestro puede ser altamente disponible (no single-point-of-failure)

Kubernetes Nodes
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

- Los nodos estan donde los pods corren
- Deamon services on Nodes include:
	kubelet: Agente de nodo (node agent) asegura que cada pod este corriendo y sano
	docker: Docker service, pulls, start and stops containers
	kube-proxy: Network proxy para reenviar trafico basado n servicios
- Un unico cluster de kubernetes suporta hasta 300 nodos hasta el momento

¿que es lo que kubernetes manages?
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

- Use el comando kubectl para ver y cambiar kubernetes 
- Parte de la informacion que puedes consultar:
	pod - Agrupa uno o mas contenedores
		Actuan como si estubieran en un mismo host
		Comparten la misma interfaz de red
		puedes tener contenedores replicados en pods diferentes
	service - Aplica un nombre al servicio ofrecido por un pod 
	replicationontroller - número de instancias de pod activas
	endpoints - IP address/ports para in servicio
	node - localizacion de un nodo en kubernetes
- Usa etcdctl to look directly in etcd store

####################################################################
################## Base Image y Custome image
####################################################################

Base images
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

- Copia pequeña de un sistema operativo en un contenedor
- Herramientas basicas y herrameitas de software (yum , apt-get)
- Las distribuciones de linux proveen sus propias imagenes base
	Con herramientas comunes que uno espera ver alli 
	O las imagenes bare bones 
- OS + componentes de runtime
- Desarrolladores pueden agergar sus proprias fuentes de datos
- Imagenes contruidas con diferentes runtime como:
	python
	nodejs
	java
	apache

Custome image
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

- Permite completo control del contenido de la imagen 
- No tiene una imagen principal
- FROM scratch or no FROM line
- Instrucciones para crear imagenes esta disponible en Docker

Demo
+ Mostrarla pagina web de docker y ver las diferentes imagenes de un distribuidor de linux
	centos
	debian
	oracle
+ Mostrar que tienen el archivo publico en github y otros privado



####################################################################
################## Configurando respositorios de software, networking, 
################## Logging y storage 
####################################################################

Usando repositorios de software
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

- Usar probado y bien conocidos repositorios 
- Usar formatos estandar de software packaged (deb, rpm, etc.)
- Limpiar el cache para mantener los contenedores magros
- SI estan disponibles use keys de validacion del paquete de va a instalar
- Para agregar repositorios para ser installados en el contenedor use:
	ol: /etc/yum.repos.d
	deb: /etc7apt/sources.list.d

acceder a la red desde el contenedor
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

- Docker inicia una red privada ( como: 172.17.42.0/16 )
- La red docker0 es creada y enruta la informacion
	Entre contenedores
	A otras interface de red en el host 
	Cada contenedor tiene su propia IP en dicha red
- Contenedores en el mismo pod pueden conectarce via localhost
	Pod: Un pod es donde uno o mas contenedores comparten storage/network y una especificacion de como ejecutar los contenedores
- Las iniciativas de red de Docker están trabajando para hacer configuraciones de red que abarcan múltiples hosts

working y logging
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

- Docker puede acceder al log de los contenedores (docker logs )
	docker logs <CONTAINER NAME> obtiene el log hasta el momento de la ejecucion de comando
	docker logs -f <CONTAINER NAME> continuamente entrega los logs 
- Oracle linux usa el systemd journal 
	Montar el host journal device dentro del contanedor
	como resultado el log del contenedor va al log de host

Accessing Storage in Containers
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

- Vincular el directorio del host al contenedor
	docker run --volume


####################################################################
################## Reglas generales para la creacion de contenedores ##################
####################################################################

- Use privilegios root para crear contenedores, no use non-root 
- Elige imagenes base estandar 
- Usa el TAG que mas se adapte a tus necesidades elegir la ultima version no siempre es la mejor decision 
- Usa instrucciones ENV para almacenar informacion util
- Restringuir los contenedores a un solo proceso (no acceso adicional como ssh)
- Proivido usar / como tu directorio de trabajo (Cuando el contenedor corre va a intenetar leer todo /)
